{"version":3,"file":"static/js/166.1516178e.chunk.js","mappings":"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","sources":["components/Forms/AuthForm/AuthFormStyles.ts","components/Forms/AuthForm/index.tsx","utils/formUtils.ts","validations/authSchema.ts"],"sourcesContent":["import { CSSProperties } from \"react\";\n\nexport const authFormStyles: { [key: string]: CSSProperties } = {\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: \"100vh\",\n    padding: \"20px\",\n    paddingTop: 0,\n    paddingBottom: \"200px\",\n  },\n};\n","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport axios from \"axios\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport {\n  Container,\n  TextField,\n  Button,\n  Typography,\n  Grid,\n  Tabs,\n  Tab,\n  Box,\n  IconButton,\n  InputAdornment,\n} from \"@mui/material\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport { useSpring, animated } from \"@react-spring/web\";\nimport { LoginFormData, RegisterFormData } from \"services/formData\";\nimport { getErrorMessage } from \"utils/formUtils\";\nimport { useAuth } from \"context/AuthContext\";\nimport { useLoading } from \"context/LoadingContext\";\nimport { authFormStyles } from \"./AuthFormStyles\";\nimport { loginSchema, registerSchema } from \"validations/authSchema\";\n\ntype BackendError = {\n  response?: {\n    data: {\n      message: string;\n    };\n  };\n  message: string;\n};\n\nconst AuthForm: React.FC = () => {\n  const { t } = useTranslation();\n  const { login, register } = useAuth();\n  const { setLoading } = useLoading();\n  const [isLogin, setIsLogin] = useState(true);\n  const [emailError, setEmailError] = useState<string | null>(null);\n  const [passwordError, setPasswordError] = useState<string | null>(null);\n  const [showPassword, setShowPassword] = useState(false);\n\n  const apiUrl =\n    process.env.NODE_ENV === \"production\"\n      ? process.env.REACT_APP_API_URL_PRODUCTION\n      : process.env.REACT_APP_API_URL_LOCAL;\n\n  const {\n    control,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm<LoginFormData | RegisterFormData>({\n    resolver: yupResolver(isLogin ? loginSchema : registerSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginFormData | RegisterFormData) => {\n    setLoading(true);\n    try {\n      if (isLogin) {\n        const response = await axios.post(`${apiUrl}/auth/login`, data);\n        login(response.data.token, response.data.user);\n      } else {\n        await register(data);\n      }\n      reset();\n      setIsLogin(true);\n      setEmailError(null);\n      setPasswordError(null);\n    } catch (error) {\n      const backendError = error as BackendError;\n      const message = backendError.response\n        ? backendError.response.data.message\n        : backendError.message;\n      if (message === \"User with this email does not exist\") {\n        setEmailError(t(\"auth.user_not_found\"));\n      } else if (message === \"Invalid credentials\") {\n        setPasswordError(t(\"auth.invalid_password\"));\n      } else {\n        setEmailError(null);\n        setPasswordError(null);\n      }\n      console.error(\"Error:\", message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSwitch = (event: React.SyntheticEvent, newValue: number) => {\n    setIsLogin(newValue === 0);\n    setEmailError(null);\n    setPasswordError(null);\n  };\n\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const springConfig = {\n    delay: 2,\n    duration: 2,\n    from: { opacity: 0, transform: \"translateY(20px)\" },\n    to: { opacity: 1, transform: \"translateY(0)\" },\n  };\n\n  const animation = useSpring(springConfig);\n\n  return (\n    <animated.div style={animation}>\n      <Container style={authFormStyles.root}>\n        <Box sx={{ maxWidth: 400, mx: \"auto\", textAlign: \"center\" }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {isLogin ? t(\"auth.login\") : t(\"auth.register\")}\n          </Typography>\n          <Tabs\n            value={isLogin ? 0 : 1}\n            onChange={handleSwitch}\n            centered\n            sx={{ marginBottom: 2 }}\n          >\n            <Tab label={t(\"auth.login\")} />\n            <Tab label={t(\"auth.register\")} />\n          </Tabs>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <Grid container spacing={2}>\n              {!isLogin && (\n                <>\n                  <Grid item xs={12}>\n                    <Controller\n                      name=\"firstName\"\n                      control={control}\n                      render={({ field }) => (\n                        <TextField\n                          label={t(\"auth.first_name\")}\n                          fullWidth\n                          {...field}\n                          error={!!getErrorMessage(errors, \"firstName\")}\n                          helperText={getErrorMessage(errors, \"firstName\")}\n                        />\n                      )}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Controller\n                      name=\"lastName\"\n                      control={control}\n                      render={({ field }) => (\n                        <TextField\n                          label={t(\"auth.last_name\")}\n                          fullWidth\n                          {...field}\n                          error={!!getErrorMessage(errors, \"lastName\")}\n                          helperText={getErrorMessage(errors, \"lastName\")}\n                        />\n                      )}\n                    />\n                  </Grid>\n                </>\n              )}\n              <Grid item xs={12}>\n                <Controller\n                  name=\"email\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      label={t(\"auth.email\")}\n                      fullWidth\n                      {...field}\n                      error={!!getErrorMessage(errors, \"email\") || !!emailError}\n                      helperText={\n                        getErrorMessage(errors, \"email\") || emailError\n                      }\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <Controller\n                  name=\"password\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      label={t(\"auth.password\")}\n                      type={showPassword ? \"text\" : \"password\"}\n                      fullWidth\n                      {...field}\n                      error={\n                        !!getErrorMessage(errors, \"password\") || !!passwordError\n                      }\n                      helperText={\n                        getErrorMessage(errors, \"password\") || passwordError\n                      }\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              onClick={handleClickShowPassword}\n                              edge=\"end\"\n                            >\n                              {showPassword ? (\n                                <Visibility style={{ fontSize: 18 }} />\n                              ) : (\n                                <VisibilityOff style={{ fontSize: 18 }} />\n                              )}\n                            </IconButton>\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n                  )}\n                />\n              </Grid>\n              {!isLogin && (\n                <Grid item xs={12}>\n                  <Controller\n                    name=\"confirmPassword\"\n                    control={control}\n                    render={({ field }) => (\n                      <TextField\n                        label={t(\"auth.confirm_password\")}\n                        type={showPassword ? \"text\" : \"password\"}\n                        fullWidth\n                        {...field}\n                        error={!!getErrorMessage(errors, \"confirmPassword\")}\n                        helperText={getErrorMessage(errors, \"confirmPassword\")}\n                        InputProps={{\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              <IconButton\n                                onClick={handleClickShowPassword}\n                                edge=\"end\"\n                              >\n                                {showPassword ? (\n                                  <Visibility style={{ fontSize: 18 }} />\n                                ) : (\n                                  <VisibilityOff style={{ fontSize: 18 }} />\n                                )}\n                              </IconButton>\n                            </InputAdornment>\n                          ),\n                        }}\n                      />\n                    )}\n                  />\n                </Grid>\n              )}\n              <Grid item xs={12}>\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  fullWidth\n                >\n                  {isLogin ? t(\"auth.login\") : t(\"auth.register\")}\n                </Button>\n              </Grid>\n            </Grid>\n          </form>\n        </Box>\n      </Container>\n    </animated.div>\n  );\n};\n\nexport default AuthForm;\n","import { FieldErrors } from \"react-hook-form\";\n\nexport const getErrorMessage = (errors: FieldErrors, path: string) => {\n  const keys = path.split(\".\");\n  let error: any = errors;\n\n  for (const key of keys) {\n    if (!error[key]) {\n      return undefined;\n    }\n    error = error[key];\n  }\n  return error?.message;\n};\n","import * as yup from \"yup\";\nimport i18next from \"i18next\";\n\nexport const loginSchema = yup.object({\n  email: yup\n    .string()\n    .email(i18next.t(\"email.invalid\"))\n    .required(i18next.t(\"email.required\")),\n  password: yup\n    .string()\n    .min(6, i18next.t(\"password.min\"))\n    .required(i18next.t(\"password.required\")),\n});\nexport const registerSchema = yup.object({\n  firstName: yup.string().required(i18next.t(\"firstName\")),\n  lastName: yup.string().required(i18next.t(\"lastName\")),\n  email: yup\n    .string()\n    .email(i18next.t(\"email.invalid\"))\n    .required(i18next.t(\"email.required\")),\n  password: yup\n    .string()\n    .min(6, i18next.t(\"password.min\"))\n    .required(i18next.t(\"password.required\")),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref(\"password\"), undefined], i18next.t(\"password.confirm\"))\n    .required(i18next.t(\"confirmPassword\")),\n});\nconst SUPPORTED_FORMATS = [\n  \"application/pdf\",\n  \"text/plain\",\n  \"application/msword\",\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n];\nexport const translationSchema = yup.object().shape({\n  name: yup.string().required(i18next.t(\"form.errors.name_required\")),\n  phone: yup.string().required(i18next.t(\"form.errors.phone_required\")),\n  email: yup\n    .string()\n    .email(i18next.t(\"form.errors.email_invalid\"))\n    .required(i18next.t(\"form.errors.email_required\")),\n  language: yup.string().required(i18next.t(\"form.errors.language_required\")),\n  message: yup.string().required(i18next.t(\"form.errors.message_required\")),\n  file: yup\n    .mixed()\n    .required(i18next.t(\"form.errors.file_required\"))\n    .test(\"fileSize\", i18next.t(\"form.errors.file_size\"), (value) => {\n      if (!value || !(value instanceof FileList)) {\n        return false;\n      }\n      return value[0]?.size <= 10485760;\n    })\n    .test(\"fileType\", i18next.t(\"form.errors.file_type\"), (value) => {\n      if (!value || !(value instanceof FileList)) {\n        return false;\n      }\n      return SUPPORTED_FORMATS.includes(value[0]?.type);\n    }),\n});\n"],"names":["authFormStyles","root","display","flexDirection","alignItems","justifyContent","height","padding","paddingTop","paddingBottom","AuthForm","t","useTranslation","login","register","useAuth","setLoading","useLoading","isLogin","setIsLogin","useState","emailError","setEmailError","passwordError","setPasswordError","showPassword","setShowPassword","control","handleSubmit","reset","formState","errors","useForm","resolver","yupResolver","loginSchema","registerSchema","defaultValues","firstName","lastName","email","password","confirmPassword","handleClickShowPassword","animation","useSpring","delay","duration","from","opacity","transform","to","_jsx","animated","div","style","children","Container","_jsxs","Box","sx","maxWidth","mx","textAlign","Typography","variant","gutterBottom","Tabs","value","onChange","handleSwitch","event","newValue","centered","marginBottom","Tab","label","onSubmit","async","response","axios","post","concat","process","data","token","user","error","backendError","message","console","Grid","container","spacing","_Fragment","item","xs","Controller","name","render","_ref","field","TextField","fullWidth","getErrorMessage","helperText","_ref2","_ref3","_ref4","type","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","edge","Visibility","fontSize","VisibilityOff","_ref5","Button","color","path","_error","keys","split","key","yup","i18next","required","min","oneOf","undefined","SUPPORTED_FORMATS","translationSchema","shape","phone","language","file","test","_value$","FileList","size","_value$2","includes"],"sourceRoot":""}