{"version":3,"file":"static/js/166.e2c95bfd.chunk.js","mappings":"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","sources":["components/Forms/AuthForm/AuthFormStyles.ts","components/Forms/AuthForm/index.tsx"],"sourcesContent":["import { CSSProperties } from \"react\";\n\nexport const authFormStyles: { [key: string]: CSSProperties } = {\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: \"100vh\",\n    padding: \"20px\",\n    paddingTop: 0,\n    paddingBottom: \"200px\",\n  },\n};\n","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Container,\n  TextField,\n  Button,\n  Typography,\n  Grid,\n  Tabs,\n  Tab,\n  Box,\n} from \"@mui/material\";\nimport { useSpring, animated } from \"@react-spring/web\";\nimport { authFormStyles } from \"./AuthFormStyles\";\n\nconst AuthForm: React.FC = () => {\n  const { t } = useTranslation();\n  const [isLogin, setIsLogin] = useState(true);\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n\n  const handleSwitch = (event: React.SyntheticEvent, newValue: number) => {\n    setIsLogin(newValue === 0);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (isLogin) {\n      console.log(\"Login:\", { email, password });\n    } else {\n      if (password !== confirmPassword) {\n        alert(t(\"auth.passwords_do_not_match\"));\n        return;\n      }\n      console.log(\"Register:\", { firstName, lastName, email, password });\n    }\n  };\n\n  const springConfig = {\n    delay: 2,\n    duration: 2,\n    from: { opacity: 0, transform: \"translateY(20px)\" },\n    to: { opacity: 1, transform: \"translateY(0)\" },\n  };\n\n  const animation = useSpring(springConfig);\n\n  return (\n    <animated.div style={animation}>\n      <Container style={authFormStyles.root}>\n        <Box sx={{ maxWidth: 400, mx: \"auto\", textAlign: \"center\" }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {isLogin ? t(\"auth.login\") : t(\"auth.register\")}\n          </Typography>\n          <Tabs value={isLogin ? 0 : 1} onChange={handleSwitch} centered>\n            <Tab label={t(\"auth.login\")} />\n            <Tab label={t(\"auth.register\")} />\n          </Tabs>\n          <form onSubmit={handleSubmit}>\n            <Grid container spacing={2}>\n              {!isLogin && (\n                <>\n                  <Grid item xs={12}>\n                    <TextField\n                      label={t(\"auth.first_name\")}\n                      fullWidth\n                      value={firstName}\n                      onChange={(e) => setFirstName(e.target.value)}\n                      required\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <TextField\n                      label={t(\"auth.last_name\")}\n                      fullWidth\n                      value={lastName}\n                      onChange={(e) => setLastName(e.target.value)}\n                      required\n                    />\n                  </Grid>\n                </>\n              )}\n              <Grid item xs={12}>\n                <TextField\n                  label={t(\"auth.email\")}\n                  fullWidth\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  label={t(\"auth.password\")}\n                  type=\"password\"\n                  fullWidth\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                />\n              </Grid>\n              {!isLogin && (\n                <Grid item xs={12}>\n                  <TextField\n                    label={t(\"auth.confirm_password\")}\n                    type=\"password\"\n                    fullWidth\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    required\n                  />\n                </Grid>\n              )}\n              <Grid item xs={12}>\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  fullWidth\n                >\n                  {isLogin ? t(\"auth.login\") : t(\"auth.register\")}\n                </Button>\n              </Grid>\n            </Grid>\n          </form>\n        </Box>\n      </Container>\n    </animated.div>\n  );\n};\n\nexport default AuthForm;\n"],"names":["authFormStyles","root","display","flexDirection","alignItems","justifyContent","height","padding","paddingTop","paddingBottom","AuthForm","t","useTranslation","isLogin","setIsLogin","useState","firstName","setFirstName","lastName","setLastName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","animation","useSpring","delay","duration","from","opacity","transform","to","_jsx","animated","div","style","children","Container","_jsxs","Box","sx","maxWidth","mx","textAlign","Typography","variant","gutterBottom","Tabs","value","onChange","handleSwitch","event","newValue","centered","Tab","label","onSubmit","preventDefault","console","log","alert","Grid","container","spacing","_Fragment","item","xs","TextField","fullWidth","e","target","required","type","Button","color"],"sourceRoot":""}