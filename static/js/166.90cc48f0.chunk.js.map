{"version":3,"file":"static/js/166.90cc48f0.chunk.js","mappings":"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","sources":["components/Forms/AuthForm/AuthFormStyles.ts","components/Forms/AuthForm/index.tsx","utils/formUtils.ts","validations/authSchema.ts"],"sourcesContent":["import { CSSProperties } from \"react\";\n\nexport const authFormStyles: { [key: string]: CSSProperties } = {\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: \"100vh\",\n    padding: \"20px\",\n    paddingTop: 0,\n    paddingBottom: \"200px\",\n  },\n};\n","import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport axios from \"axios\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport {\n  Container,\n  TextField,\n  Button,\n  Typography,\n  Grid,\n  Tabs,\n  Tab,\n  Box,\n  IconButton,\n  InputAdornment,\n} from \"@mui/material\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport { useSpring, animated } from \"@react-spring/web\";\nimport { LoginFormData, RegisterFormData } from \"services/formData\";\nimport { getErrorMessage } from \"utils/formUtils\";\nimport { useAuth } from \"context/AuthContext\";\nimport { useLoading } from \"context/LoadingContext\";\nimport { authFormStyles } from \"./AuthFormStyles\";\nimport { loginSchema, registerSchema } from \"validations/authSchema\";\n\ntype BackendError = {\n  response?: {\n    data: {\n      message: string;\n    };\n  };\n  message: string;\n};\n\nconst AuthForm: React.FC = () => {\n  const { t } = useTranslation();\n  const authContext = useAuth();\n  const { setLoading } = useLoading();\n  const [isLogin, setIsLogin] = useState(true);\n  const [emailError, setEmailError] = useState<string | null>(null);\n  const [passwordError, setPasswordError] = useState<string | null>(null);\n  const [showPassword, setShowPassword] = useState(false);\n  const {\n    control,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm<LoginFormData | RegisterFormData>({\n    resolver: yupResolver(isLogin ? loginSchema : registerSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n  const springConfig = {\n    delay: 2,\n    duration: 2,\n    from: { opacity: 0, transform: \"translateY(20px)\" },\n    to: { opacity: 1, transform: \"translateY(0)\" },\n  };\n  const animation = useSpring(springConfig);\n\n  if (!authContext) {\n    return null;\n  }\n  const { login, register } = authContext || {};\n  const apiUrl =\n    process.env.NODE_ENV === \"production\"\n      ? process.env.REACT_APP_API_URL_PRODUCTION\n      : process.env.REACT_APP_API_URL_LOCAL;\n\n  const onSubmit = async (data: LoginFormData | RegisterFormData) => {\n    setLoading?.(true);\n    try {\n      if (isLogin) {\n        const response = await axios.post(`${apiUrl}/auth/login`, data);\n        login(response.data.token, response.data.user);\n      } else {\n        await register(data);\n      }\n      reset();\n      setIsLogin(true);\n      setEmailError(null);\n      setPasswordError(null);\n    } catch (error) {\n      const backendError = error as BackendError;\n      const message = backendError.response\n        ? backendError.response.data.message\n        : backendError.message;\n      if (message === \"User with this email does not exist\") {\n        setEmailError(t(\"auth.user_not_found\"));\n      } else if (message === \"Invalid credentials\") {\n        setPasswordError(t(\"auth.invalid_password\"));\n      } else {\n        setEmailError(null);\n        setPasswordError(null);\n      }\n      console.error(\"Error:\", message);\n    } finally {\n      setLoading?.(false);\n    }\n  };\n\n  const handleSwitch = (event: React.SyntheticEvent, newValue: number) => {\n    setIsLogin(newValue === 0);\n    setEmailError(null);\n    setPasswordError(null);\n  };\n\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  return (\n    <animated.div style={animation}>\n      <Container style={authFormStyles.root}>\n        <Box sx={{ maxWidth: 400, mx: \"auto\", textAlign: \"center\" }}>\n          <Typography variant=\"h4\" gutterBottom>\n            {isLogin ? t(\"auth.login\") : t(\"auth.register\")}\n          </Typography>\n          <Tabs\n            value={isLogin ? 0 : 1}\n            onChange={handleSwitch}\n            centered\n            sx={{ marginBottom: 2 }}\n          >\n            <Tab label={t(\"auth.login\")} />\n            <Tab label={t(\"auth.register\")} />\n          </Tabs>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <Grid container spacing={2}>\n              {!isLogin && (\n                <>\n                  <Grid item xs={12}>\n                    <Controller\n                      name=\"firstName\"\n                      control={control}\n                      render={({ field }) => (\n                        <TextField\n                          label={t(\"auth.first_name\")}\n                          fullWidth\n                          {...field}\n                          error={!!getErrorMessage(errors, \"firstName\")}\n                          helperText={getErrorMessage(errors, \"firstName\")}\n                        />\n                      )}\n                    />\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Controller\n                      name=\"lastName\"\n                      control={control}\n                      render={({ field }) => (\n                        <TextField\n                          label={t(\"auth.last_name\")}\n                          fullWidth\n                          {...field}\n                          error={!!getErrorMessage(errors, \"lastName\")}\n                          helperText={getErrorMessage(errors, \"lastName\")}\n                        />\n                      )}\n                    />\n                  </Grid>\n                </>\n              )}\n              <Grid item xs={12}>\n                <Controller\n                  name=\"email\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      label={t(\"auth.email\")}\n                      fullWidth\n                      {...field}\n                      error={!!getErrorMessage(errors, \"email\") || !!emailError}\n                      helperText={\n                        getErrorMessage(errors, \"email\") || emailError\n                      }\n                    />\n                  )}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <Controller\n                  name=\"password\"\n                  control={control}\n                  render={({ field }) => (\n                    <TextField\n                      label={t(\"auth.password\")}\n                      type={showPassword ? \"text\" : \"password\"}\n                      fullWidth\n                      {...field}\n                      error={\n                        !!getErrorMessage(errors, \"password\") || !!passwordError\n                      }\n                      helperText={\n                        getErrorMessage(errors, \"password\") || passwordError\n                      }\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              onClick={handleClickShowPassword}\n                              edge=\"end\"\n                            >\n                              {showPassword ? (\n                                <Visibility style={{ fontSize: 18 }} />\n                              ) : (\n                                <VisibilityOff style={{ fontSize: 18 }} />\n                              )}\n                            </IconButton>\n                          </InputAdornment>\n                        ),\n                      }}\n                    />\n                  )}\n                />\n              </Grid>\n              {!isLogin && (\n                <Grid item xs={12}>\n                  <Controller\n                    name=\"confirmPassword\"\n                    control={control}\n                    render={({ field }) => (\n                      <TextField\n                        label={t(\"auth.confirm_password\")}\n                        type={showPassword ? \"text\" : \"password\"}\n                        fullWidth\n                        {...field}\n                        error={!!getErrorMessage(errors, \"confirmPassword\")}\n                        helperText={getErrorMessage(errors, \"confirmPassword\")}\n                        InputProps={{\n                          endAdornment: (\n                            <InputAdornment position=\"end\">\n                              <IconButton\n                                onClick={handleClickShowPassword}\n                                edge=\"end\"\n                              >\n                                {showPassword ? (\n                                  <Visibility style={{ fontSize: 18 }} />\n                                ) : (\n                                  <VisibilityOff style={{ fontSize: 18 }} />\n                                )}\n                              </IconButton>\n                            </InputAdornment>\n                          ),\n                        }}\n                      />\n                    )}\n                  />\n                </Grid>\n              )}\n              <Grid item xs={12}>\n                <Button\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  fullWidth\n                >\n                  {isLogin ? t(\"auth.login\") : t(\"auth.register\")}\n                </Button>\n              </Grid>\n            </Grid>\n          </form>\n        </Box>\n      </Container>\n    </animated.div>\n  );\n};\n\nexport default AuthForm;\n","import { FieldErrors } from \"react-hook-form\";\n\nexport const getErrorMessage = (\n  errors: FieldErrors,\n  path: string\n): string | undefined => {\n  const keys = path.split(\".\");\n  let error: any = errors;\n\n  for (const key of keys) {\n    if (!error[key]) {\n      return undefined;\n    }\n    error = error[key];\n  }\n\n  return error?.message ? String(error.message) : undefined;\n};\n","import * as yup from \"yup\";\nimport i18next from \"i18next\";\n\nexport const loginSchema = yup.object({\n  email: yup\n    .string()\n    .email(i18next.t(\"email.invalid\"))\n    .required(i18next.t(\"email.required\")),\n  password: yup\n    .string()\n    .min(6, i18next.t(\"password.min\"))\n    .required(i18next.t(\"password.required\")),\n});\nexport const registerSchema = yup.object({\n  firstName: yup.string().required(i18next.t(\"firstName\")),\n  lastName: yup.string().required(i18next.t(\"lastName\")),\n  email: yup\n    .string()\n    .email(i18next.t(\"email.invalid\"))\n    .required(i18next.t(\"email.required\")),\n  password: yup\n    .string()\n    .min(6, i18next.t(\"password.min\"))\n    .required(i18next.t(\"password.required\")),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref(\"password\"), undefined], i18next.t(\"password.confirm\"))\n    .required(i18next.t(\"confirmPassword\")),\n});\nconst SUPPORTED_FORMATS = [\n  \"application/pdf\",\n  \"text/plain\",\n  \"application/msword\",\n  \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n];\nexport const translationSchema = yup.object().shape({\n  name: yup.string().required(i18next.t(\"form.errors.name_required\")),\n  phone: yup.string().required(i18next.t(\"form.errors.phone_required\")),\n  email: yup\n    .string()\n    .email(i18next.t(\"form.errors.email_invalid\"))\n    .required(i18next.t(\"form.errors.email_required\")),\n  language: yup.string().required(i18next.t(\"form.errors.language_required\")),\n  message: yup.string().required(i18next.t(\"form.errors.message_required\")),\n  file: yup\n    .mixed()\n    .required(i18next.t(\"form.errors.file_required\"))\n    .test(\"fileSize\", i18next.t(\"form.errors.file_size\"), (value) => {\n      if (!value || !(value instanceof FileList)) {\n        return false;\n      }\n      return value[0]?.size <= 10485760;\n    })\n    .test(\"fileType\", i18next.t(\"form.errors.file_type\"), (value) => {\n      if (!value || !(value instanceof FileList)) {\n        return false;\n      }\n      return SUPPORTED_FORMATS.includes(value[0]?.type);\n    }),\n});\n"],"names":["authFormStyles","root","display","flexDirection","alignItems","justifyContent","height","padding","paddingTop","paddingBottom","t","useTranslation","authContext","useAuth","setLoading","useLoading","_useState","useState","_useState2","_slicedToArray","isLogin","setIsLogin","_useState3","_useState4","emailError","setEmailError","_useState5","_useState6","passwordError","setPasswordError","_useState7","_useState8","showPassword","setShowPassword","_useForm","useForm","resolver","yupResolver","loginSchema","registerSchema","defaultValues","firstName","lastName","email","password","confirmPassword","control","handleSubmit","reset","errors","formState","animation","useSpring","delay","duration","from","opacity","transform","to","_ref","login","register","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","response","backendError","message","wrap","_context","prev","next","axios","post","concat","process","sent","token","user","t0","console","error","finish","stop","_x","apply","arguments","handleClickShowPassword","_jsx","animated","div","style","children","Container","_jsxs","Box","sx","maxWidth","mx","textAlign","Typography","variant","gutterBottom","Tabs","value","onChange","event","newValue","centered","marginBottom","Tab","label","Grid","container","spacing","_Fragment","item","xs","Controller","name","render","_ref3","field","TextField","_objectSpread","fullWidth","getErrorMessage","helperText","_ref4","_ref5","_ref6","type","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","edge","Visibility","fontSize","VisibilityOff","_ref7","Button","color","path","_error","_step","keys","split","_iterator","_createForOfIteratorHelper","s","n","done","key","err","e","f","String","undefined","yup","i18next","required","min","oneOf","SUPPORTED_FORMATS","translationSchema","shape","phone","language","file","test","_value$","FileList","size","_value$2","includes"],"sourceRoot":""}